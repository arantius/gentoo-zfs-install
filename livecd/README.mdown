This tutorial explains how to build a Gentoo install livecd with support for ZFS.  Using such a CD makes the process of building a Gentoo system with ZFS as its root filesystem relatively straight forward.

Requirements
============

This tutorial assumes you have access to an existing Gentoo Linux system with the usual suite of compilation tools available.  This system need not have any support for ZFS installed.  Though you must have the zfs portage overlay available.  Gentoo's Catalyst livecd builder will be used to generate a livecd nearly identical to the official Gentoo install media with ZFS support integrated.

You'll also need to install Gentoo's Catalyst tool and dosfstools.  Note that all package installs in this doc will use fully versioned portage atoms.  It's likely that later versions will still work, but the actual versions used are shown for clarity.

    emerge -v =dev-util/catalyst-2.0.15 =sys-fs/dosfstools-3.0.22

About Catalyst
==============

Catalyst is Gentoo's release engineering system which is used to build official Gentoo ISO images for release.  Catalyst uses a system of spec files which describe the steps to create various stages of the build process and finally ISO images.  These spec files instruct Catalyst which packages to include, what configuration scripts to run, and allow overriding Portage behavior as needed.

The spec files presented here are taken directly from Gentoo's releng project as of about Dec 10 2013.  The scripts have been modified as little as possible to get them to work with ZFS, so the end result is very close to official Gentoo install media.  

In addition to the spec files, portage config, and a few shell scripts, Catalyst also needs a bootstrap stage3 tarball and a snapshot of the portage tree to launch the build process.

Downloading the Files
=====================

You'll need to download the 'livecd' folder from the github repository.  You can either clone the repo or download a tarball using the Downloads button in the upper right corner of github's interface.  No "official" tarballs are prepared at this time.

Place the livecd folder at /root/livecd.  You'll need to customize some of the files before you start building the livecd.  You'll also need a stage3 tarball and a portage snapshot.  Get the stage3 tarball from [your favorite Gentoo mirror]{http://www.gentoo.org/main/en/mirrors.xml), and use `emerge --sync && catalyst -s latest` to generate the portage snapshot.

Initial Setup
=============

By default, Catalyst uses `/var/tmp/catalyst` as a working directory during the build process (storedir).  You may need to adjust some paths in the spec files and in these instructions if you modify this path.  If you wish to modify this setting, you should edit `/etc/catalyst/catalyst.conf`.

You will probably also want to edit `/etc/catalyst/catalystrc` set MAKEOPTS for your CPU.  You should set -j to one more than the number of cores you have available for compilation.  A two-core system would use:

    export MAKEOPTS="-j3"

Place the bootstrap stage3 tarball in `/var/tmp/catalyst/builds`.  There's no need to un-tar it.  If you used your own stage3, you'll need to edit `specs/stage1.spec` to reflect the correct filename.

Customizing the Spec Files
--------------------------

The stage files assume that the livecd package is installed at `/root/livecd` so that `/root/livecd/spec/stage1.spec` is a valid location.  Several critical scripts and portage configurations are referenced from the installcd-stage\*.spec files, and the livecd build process will fail if the paths are not updated.

Skim through each of the stage files to see if any additional customization is required.  Other than changing version strings or snapshot/stage paths, the stage1-3 files are used pretty much as-is.  The installcd-stage\*.spec files are where you can customize packages which will be included on the livecd.  Please see Gentoo's Catalyst documentation for more advanced customizations that are available.  

Please note that customization may lead to failure of the livecd build process, so unless you have a strong need to have a particular package _on the livecd_ as opposed to in the final system, you should leave the spec files as-is.

Kernel Configuration
--------------------

It's recommended that you use the included installcd-2.6.38.config file and stick with 2.6.38 as the kernel for the livecd.  If you wish to customize this file, you must ensure that the following settings are included:

    CONFIG_KALLSYMS=y
    CONFIG_PREEMPT_NONE=y

ZFS will fail if these settings are incorrect.  Please also note that ZFS may have compatibility issues with newly released kernels, so double check that ZFS is compatible with your desired kernel before changing the version.

Building the Stages
-------------------

Once everything is configured, you can start the stage build process.  This will take a while...  You need to build a stage 1, 2, and 3 Gentoo system (in a chroot) before finally building a stage1 and stage2 livecd.  While it's technically possible to build installcd-stage1 directly from a pre-existing stage3, it's not recommended.  If it breaks, you get to keep the pieces...

    cd /root/livecd # Where you downloaded the files.
    catalyst -v -f specs/stage1.spec && \
    catalyst -v -f specs/stage2.spec && \
    catalyst -v -f specs/stage3.spec && \
    catalyst -v -f specs/installcd-stage1.spec && \
    catalyst -v -f specs/installcd-stage2-minimal.spec
    
You should check the output from each stage to make sure there are no errors.  The end result of the installcd-stage2 build will be an ISO file at `/root/livecd/install-amd64-minimal-10.0.zfs.iso`.  You can use these CD image to install Gentoo.

Licensing Note
==============

There's much FUD flying around about licensing of ZFS and its compatibility with GPL.  The CDDL license under which the ZFS code is distributed does conflict with GPL on several terms, and this conflict makes it impossible to ship code which links both GPL and CDDL code (thus rendering it a derivative work of both code bases).

While I am not a lawyer, it's my good faith belief based on my understanding of the term "link" and of comments made by Linus Torvalds mirrored at  http://linuxmafia.com/faq/Kernel/proprietary-kernel-modules.html that simply creating kernel modules for Linux is not sufficient for those modules to be considered derivative works of the Linux kernel.  

The specifically mentioned case of the Andrew File System driver is particularly germane in that just as with AFS, ZFS represents a pre-existing code base that clearly has a life independent of the Linux kernel.  As such, the modules themselves are not derivative works of the kernel and may be distributed in compiled form purely under the terms of the CDDL.  It is with this understanding that an ISO of the above described process is made available:

* http://...
* MD5(install-amd64-minimal-10.0.zfs.iso)= ...
* SHA1(install-amd64-minimal-10.0.zfs.iso)= ...
