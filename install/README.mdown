Bootable Gentoo on ZFS Root
===========================

This tutorial describes the process for migrating an existing Gentoo system to run on a root filesystem using the ZFS filesystem using the native ZFS module available from https://github.com/behlendorf/zfs.

This tutorial will give you a bootable ZFS root filesystem, albeit using GRUB on an MD-mirrored ext2 boot partition.  The tutorial will be updated for 

Assumptions
-----------

* You have an existing bootable Gentoo system with a sane set of kernel, compiler tools, etc. available.
* You know your way around Portage, are comfortable using overlays, repartitioning disks, and the like.
* You don't mind losing everything on the system in question (in case something goes wrong).
* You're comfortable running bleeding edge versions of software, in most cases where no "official" release is yet available.

This tutorial won't help you go from a Gentoo install CD and bare metal to a working system.  While the author is currently working to build a catalyst-based livecd with the necessary kernel modules and user mode tools, this is not yet available and in fact may not be distributable given licensing restrictions on ZFS.  Instead this tutorial explains the steps necessary to get ZFS working on a system, migrate the root filesystem to new storage using ZFS, and switch to booting from this new storage.

Recommendations
---------------

* Trying at least one "dry-run" of these instructions would be a GoodIdea(tm).  Using VMWare, VirtualBox, or the like makes for an easy test bed and much easier recovery when things go wrong.
* Don't do this to production hardware!  The ZFSonLinux kernel modules are still evolving software.  While they are reasonably stable and in use by many people for real-world work loads, using this for a mission critical system isn't the safest of things to do.
* Have a livecd standing by.  You'll probably need it...
* And for heaven's sake, make & test a backup if you care in the least about what's on the system you're going to migrate.

Required Packages
=================

Before getting started, you'll need the following packages emerged on your system:

* app-portage/layman
* dev-vcs/git
* gentoo-sources-2.6.38-r6 -- ZFS may work on later kernels by the time you read this, but please don't assume that it will without checking the commit history from the git repository.  Kernel upgrades can easily break ZFS' interface into the kernel.
* gcc/make/etc.

Installing Packages
===================

Now we'll start installing the software necessary to make this all work.

Adding the Layman Overlay
-------------------------

A Portage overlay is available which provides ebuilds for patched & customized versions of much of the source code.  The need for this should diminish as patches are integrated in upstream repositories, but if you're living on the bleeding edge, you'll have to work a bit harder...

Edit `/etc/layman/layman.cfg` and modify the `overlays` section as follows:

    overlays  : http://www.gentoo.org/proj/en/overlays/repositories.xml
		        https://raw.github.com/pendor/gentoo-zfs-overlay/master/overlay.xml
The first line should already be there.  Add the second and save the file.

Now enable the zfs overlay and sync it.

    $ layman -a zfs
    $ layman -S

This overlay provides "-9999" versions of spl, zfs, and genkernel.

Note that if you've not previously configured layman, you may also need to edit your `/etc/make.conf` to enable it.  Make sure the following line is present:

    source /var/lib/layman/make.conf

ZFS & SPL
---------

SPL (Solaris Porting Layer) enables building the ZFS modules with minimal changes to the core source code.  Instead of adapting the ZFS code directly to the Linux system (resulting in a maintainability nightmare when/if Oracle releases updated source), SPL provides a more Solaris-like environment for the existing ZFS code to use.

For SPL, we'll be installing the latest git-based build from the maintainer.  Presently no patches are necessary to SPL.

    emerge -v =sys-devel/spl-9999

For ZFS, we currently require patches for the Dracut/Genkernel integration and to fix the Gentoo init scripts for ZFS.  The layman zfs overlay will pull ZFS from the fork at https://github.com/pendor/zfs instead of the usual repository.

    emerge -v =sys-fs/zfs-9999

Genkernel
---------

In order to support booting with a ZFS root filesystem, the Dracut branch of genkernel is used.  This branch uses the cross-distro initramfs builder Dracut rather than relying on Genkernel's traditional initramfs logic.  This allows us to leverage the Dracut module already present in the ZFS source and avoid re-inventing the wheel for each distro.  The layman zfs overlay provides a forked version of Genkernel from https://github.com/pendor/genkernel-zfs (branch: dracut).

    emerge -v =sys-kernel/genkernel-9999

Configuring ZFS
===============

Now that all of the required software is installed, it's time to start building a ZFS pool and moving software to it.  The examples below will assume a system with two SCSI drives, one of which holds the current live operating system and the other which will hold ZFS.  When the migration is completed, the original system drive will be added to the zpool as a mirror device.  You could also choose to use several additional devices in a RAID-Z configuration rather than re-using the current root device.

Partitioning
------------

Assume your two hard drives are `/dev/sda` and `/dev/sdb`.  sda is the live device, sdb will be reformatted for ZFS.  

Creating the zpool
------------------

First we'll load the ZFS modules if they're not already and create a pool with one drive in it.  The default mountpoint for the pool would be /rpool which won't work for booting, so we export it, change some setting, and import it to a temporary mountpoint.

    modprobe zfs
    zpool create rpool sdb3

Creating Filesystems
--------------------

Now it's time to create some filesystems to work with.  First we unmount the rpool we just mounted and reset it's mount parameters.  We make the root dataset unmountable and set its mountpoint to / so the child datasets inherit their mount points directly.  Next we create the dataset that will actually be the root filesystem and give it a legacy mountpoint (since the initramfs will mount it manually).  Why not use the rpool/ root dataset as the root filesystem?  Many of ZFS' attributes are inherited from their parent, and attributes for the root of the filesystem are often best not propagated down the tree.  By creating an explicit dataset for ROOT, we can set attributes intended to be inherited on the rpool/ dataset and still set attributes necessary for the root filesystem on rpool/ROOT.

    zfs umount rpool
    zfs set mountpoint=/ rpool
    zfs set canmount=off rpool
    zfs create -o mountpoint=legacy rpool/ROOT

Now we'll create some additional datasets to break things up.  The beauty of ZFS is that it allows creation of any number of datasets to split administrative and performance boundaries.  For example, you might decide to turn on compression for logfiles and source code

Note that /bin, /sbin, /etc, /dev, /sys, /proc must all be in the root dataset.

		zfs create rpool/home
		zfs create rpool/usr
		zfs create rpool/usr/local
		zfs create rpool/usr/portage
		zfs create rpool/usr/src
		zfs create rpool/var
		zfs create rpool/var/log



Copying Root
------------

Building the initramfs
----------------------

Configuring GRUB
----------------

Reboot!
-------

Setup Mirroring - No Turning Back!
----------------------------------


